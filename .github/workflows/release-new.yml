name: Release

on:
  release:
    types: [published]

jobs:
  build-and-tag:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check_changes.outputs.should_publish }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tag comparison
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Build action
      run: npm run build
    
    - name: Check for changes since last release
      id: check_changes
      run: |
        # Get the last release tag (excluding current one)
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        LAST_TAG=$(git tag -l | grep -v "^$CURRENT_TAG$" | sort -V | tail -1 || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          echo "No previous release found, proceeding with publish"
          echo "should_publish=true" >> $GITHUB_OUTPUT
        else
          # Check if there are changes in source files since last release
          CHANGES=$(git diff --name-only $LAST_TAG $CURRENT_TAG -- src/ package.json package-lock.json action.yml || echo "changes")
          
          if [ -n "$CHANGES" ]; then
            echo "Source changes detected since $LAST_TAG:"
            echo "$CHANGES"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "No source changes since $LAST_TAG, skipping publish"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi
        fi
    
    - name: Commit built files
      if: steps.check_changes.outputs.should_publish == 'true'
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add built files
        git add dist/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "chore: update built files for release ${GITHUB_REF#refs/tags/}"
          git push
        fi
    
    - name: Update major version tag
      if: steps.check_changes.outputs.should_publish == 'true'
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create or update the major version tag (e.g., v1, v2)
        git tag -fa $MAJOR_VERSION -m "Update $MAJOR_VERSION tag"
        git push origin $MAJOR_VERSION --force
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-marketplace:
    runs-on: ubuntu-latest
    needs: build-and-tag
    if: needs.build-and-tag.outputs.should_publish == 'true' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build action  
      run: npm run build
    
    - name: Publish to GitHub Actions Marketplace
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/index.js
        asset_name: index.js
        asset_content_type: application/javascript
